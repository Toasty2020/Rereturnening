<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ninjaboy_walk</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
tag = 0;
grav = 0.8;
hsp = 0;
vsp = 0;
jumpspeed = 10;
movespeed = 7;
jumps = 0;
jumpsmax = 1;
canJump = true;
player_health = 30;

//ignores axis input of 0.7 or lower for device 0
gamepad_set_axis_deadzone(0, 0.5);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(rs_right)
{
instance_create(x,y, obj_shuriken);
instance_create(x+20,y, obj_shuriken);
instance_create(x+40,y, obj_shuriken);
}

if(rs_left)
{
instance_create(x,y, obj_shuriken);
instance_create(x-20,y, obj_shuriken);
instance_create(x-40,y, obj_shuriken);
}

if(rs_up) || (rs_down)
{
instance_create(x,y, obj_shuriken);
instance_create(x,y-20, obj_shuriken);
instance_create(x,y-40, obj_shuriken);
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(rs_right)
{
instance_create(x,y, obj_shuriken);
instance_create(x+20,y, obj_shuriken);
instance_create(x+40,y, obj_shuriken);
}

if(rs_left)
{
instance_create(x,y, obj_shuriken);
instance_create(x-20,y, obj_shuriken);
instance_create(x-40,y, obj_shuriken);
}

if(rs_up) || (rs_down)
{
instance_create(x,y, obj_shuriken);
instance_create(x,y-20, obj_shuriken);
instance_create(x,y-40, obj_shuriken);
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Controls and Player Physics

//Get the player's input
key_right = keyboard_check(ord("D")) || (gamepad_axis_value(0, gp_axislh) &gt; 0);
key_left = -(keyboard_check(ord("A")) || (gamepad_axis_value(0, gp_axislh) &lt; 0));
key_jump = keyboard_check_pressed(vk_space) || (gamepad_button_check_pressed(0, gp_shoulderrb));


rs_up = -(gamepad_axis_value(0, gp_axisrv));
rs_down = (gamepad_axis_value(0, gp_axisrv));
rs_right = (gamepad_axis_value(0, gp_axisrh) &gt; 0);
rs_left = (gamepad_axis_value(0, gp_axisrh) &lt; 0);





//shuriken creator
if(rs_right)
{   
    
    if(alarm[0] = -1) alarm = 4; 
   
}

if(rs_left)
{
   
    if (alarm[0] = -1) alarm = 4;
}
if(rs_up)
{
    
    if (alarm[0] = -1) alarm = 4;
}

if(rs_down)
{
    
    if (alarm[0] = -1) alarm = 4;
}




//React to inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

//Wall jump wall detection
if (place_meeting(x, y+1, all))
{
    canJump = true;
}

//jump system
if(key_jump) &amp;&amp; (canJump)
{
    canJump = false;
    vsp = key_jump * -jumpspeed;
    audio_play_sound(snd_jump, 4, false);
    
    
}

// wall jump check
//if(place_meeting(x+16,y,obj_block) &amp;&amp; (keyboard_check(ord("A")))) canJump = true;

//if(place_meeting(x-16,y,obj_block) &amp;&amp; (keyboard_check(ord("D")))) canJump = true;

if(place_meeting(x+16,y,all) &amp;&amp; (gamepad_axis_value(0, gp_axislh) &lt; 0)) 
{

    canJump = true;
}
if(place_meeting(x-16,y,all) &amp;&amp; (gamepad_axis_value(0, gp_axislh) &gt; 0))
{

 canJump = true;
 
 }
//remember, hsp = 7 or -7
//Horizontal Collision
if (place_meeting(x+hsp,y, all) || place_meeting(x+hsp, y, obj_rightslope))
{
    
   /* while(!place_meeting(x+sign(hsp),y, all))
    {
        x += sign(hsp);
    }*/
    hsp = 0;  
} 

x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,all))
{
    while(!place_meeting(x,y+vsp,all))
    {
        y+= sign(vsp);  
    }
    vsp = 0;  
}

y += vsp;

//ANIMATION HANDLER

//flips player around when going back or forward
if (move!=0) image_xscale = move;

//handles ground animations
if (place_meeting(x,y+1,all))
{
    if (move!=0) sprite_index = spr_ninjaboy_walk; else sprite_index = spr_ninjaboy_idle;
}
// aerial animations
else
{
    if(vsp &lt; 0) sprite_index = spr_ninjaboy_idle;
    
}

//game over
if(player_health &lt;= 0)
{
    audio_play_sound(snd_fatality, 5, false);
    game_restart();
}

if(y &gt; 830)
{
    game_restart();
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
